1.背景
架构的演化过程中，在对服务进行拆分多个服务之后，部署在不同服务器之间的服务的相互调用的复杂度上升，需要考虑网络传输，序列化，负载均衡等问题，需要一个统一的PRC框架来处理。

2.业界比较
目前业界使用的较多的是DUBBO 和 SpringCloud。
区别：
1）SpringCloud的配套功能比Dubbo齐全，比如网关，熔断器等；
2）Dubbo是二进制传输，带宽占用比SC的http协议传输要少；
3）Dubbo的注册中心是zk或者redis, SC是eureka；

3.概要设计
#主要功能
服务注册和发现
序列化
负载均衡
熔断器


4.详细设计
1）服务注册和发现：通过zk存储并通知变更，客户端本地保存缓存；
2）网络链接：通过Netty（NIO性能更好）；
3）负载均衡：多种策略按需使用（随机/轮询/最少使用/一致性哈希）；
4）序列化：JDK自带序列化性能太差，使用kyro进行序列化；
5）服务调用：使用动态代理生成代理对象；

5.扩展思考
1）zk和redis做注册中心的优点和不足；
2）Netty和其他的区别；
3）kyro的序列化性能为什么比JDK快的原理；
4）动态代理的方式和优缺点；
5）熔断器的实现；
